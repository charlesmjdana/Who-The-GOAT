SAT = [[16, -2, 7, -12, -9, -11, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-8, -420, -421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[11, -8, 10, -422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[20, -6, 18, -426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[6, -433, -434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[20, -15, 5, -435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-20, 11, -3, -436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[6, 19, 18, -440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-11, 10, -2, -441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[7, 14, -13, 447, -448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[2, -3, 4, -5, 6, -7, -8, -9, -10, -11, -12, 13, -14, 15, 16, 17, 18, 19, 20, -21, 22, -23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, -35, 36, 37, 38, 39, 40, 41, 42, 43, 44, -45, 46, 47, -48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, -447, -448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[14, -9, 4, -450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[14, -17, -2, 452, -453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[2, -452, -453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-6, 3, 15, -457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-15, 18, 6, -458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-17, -4, -11, -459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[9, 13, 6, -464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-6, -3, 9, -465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-5, -1, 11, -470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-9, 11, -19, -471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[10, -9, 11, -475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-5, -480, -481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[4, 15, -8, -487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[19, 19, -17, -488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[13, 5, -16, -491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-16, -13, -6, 492, -493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[13, -492, -493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[2, -3, 4, -5, 6, -7, -8, -9, -10, -11, -12, 13, -14, 15, 16, 17, 18, 19, 20, -21, 22, -23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, -35, 36, 37, 38, 39, 40, 41, 42, 43, 44, -45, 46, 47, -48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, -492, -493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-17, 20, 19, -495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-12, -16, 13, -497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[6, 1, -16, -498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511],
[-10, 2, 1, -505, 506, 508, 510, 511],
[-13, -6, 12, 507, -508, 510, 511],
[45, -48, 13, 22, 14, -2, 49, -46, 4, 35],
[48, 17, 34, -41, 45, 33],
[-40, 48, 49, -20, 16, -45, -23, 46],
[21, 12, -45, 48, -15, 3, -33, -49, 17, -46],
[2, 33, -16, 22, -45, 3, 47, 49],
[21, 46, -16, -47, -20, -2, -15, 48, 49],
[49, 5, 2, -1, -22, -14, -4, 48],
[-46, -47, -14, 33, 20, -13, -48, 15, 45],
[-39, 45, -33, -47, 22, -49, -12, 32, 18, 46],
[-43, -49, 12, 13, -45, -23, 3, 46, 48],
[-29, 3, 49, -5, -41, -33, -16, 1, 46, -21, -48, 47, -24],
[-45, 34, 4, -33, -32, -46, -3, -24, 49],
[35, -18, 38, -2, 45],
[-19, 48, 4, -32, -18, -3, -13, 20, -45, -49],
[46, 2, 19, 45, 3, 22, 34, -20],
[-49, 5, -21, 34, -45, 48, 13, 46],
[3, -15, -23, -46, -49, -45, 33, -37, 47, -34],
[21, -13, 49, -3, 34, 15, -48],
[22, -13, 49, 35, -19, -14, -45, 5, -48],
[-58, -1, -3, -45, 13, 33, -48, 47, 46],
[-34, 13, -33, -4, -21, -48, 1, -35, 45],
[-26, 47, 49, 22, -35, 46, 21, 5, -33, 1, 20],
[3, 46, 21, 19, -33, -13, -20, 5, -45, 47],
[-43, 21, 33, -32, 16, -47, -2, 46, -48, 49],
[-54, 47, 32, -16, 22, 35, -14, 48, 46, -45],
[-50, 47, 48, 2, -23, 21, -46],
[7, 18, 17, 32, 46, -47, -45, -34, 24, 49],
[11, 35, -22, 47, 45, 48, 46, 1, -43, 5],
[-31, -13, -3, -17, 34, 48, 19, -32, -49],
[-53, -4, -15, -33, -14, -1, -2, 46, 45, -34, -47],
[-24, -46, -5, 32, 2, 1, 19, 45],
[-26, -20, 45, -12, 22, 47, -33, -35, 4, -46, -48],
[1, -5, -21, 44, -48, 49],
[-68, 13, -34, -22, -14, -33, -4, 45, -46, -48],
[-69, 46, -35, 14, 20, -19, -34, 49, 3, 48],
[-45, 4, 2, 1, 19, -33, 48, -49],
[-67, -4, 3, 16, -33, -13, -1, 48, -47, 45, -49],
[-6, 16, 32, 13, -46, -49, 45, 47],
[8, 19, -13, 32, -45, 46, 47, -3],
[-37, 21, 12, -5, -16, -46, -49, 47],
[-3, -4, -23, 45, -35, -20, 32, 47, -46, -48],
[-27, -3, -16, -19, 22, 49, 13, -46, 15],
[-30, -22, -1, -48, -19, 34, -46, 45, 49, 23, -47],
[-53, -20, -35, 12, 46, -17, 13, -22, -49, 47],
[-61, -32, -18, -22, -23, -16, 33, -46, 48, -19],
[-44, -17, -48, 23, -33, 1, -14, 32, 45, 34],
[19, -34, -1, -46, -4, 22, 48, -13, 47],
[-66, -35, 22, -33, 47, -48, -1, -46, -14, 45],
[14, -45, 49, 20, 13, -21, -46, -41, 48],
[-68, 13, -21, -32, 1, -20, -16, -48, -45, 47, -46],
[-31, -49, -1, -14, -45, 33, 48, -16, -24, 13, -47],
[45, -22, 48, 23, 13, -33, 16, -47],
[-18, 34, -6, -1, -33, 48, -2, 45, -24, -22],
[-68, 49, 1, 13, -45, -32, -16, 46, 35, 48],
[5, 21, -4, -14, -2, 46, 1, 47, 19],
[-42, 5, 15, 32, -12, -22, 46, -45, 47],
[33, 12, -5, 13, -16, 45, -48, 49],
[-29, 22, 12, 16, -47, 13, 45, -32, 46],
[-51, -33, 20, 19, 16, 35, -47, 32, -48, -49, 46, 45],
[7, 49, 16, -32, -19, -13, 47, 35],
[-68, -12, -33, 46, 21, 49, -20, 35, 45, 32],
[-17, -12, -2, -46, 23, 47, 33, -35, -49, -14],
[-4, -18, 19, -47, -34, -15, 2, -49, 48],
[4, 18, 48, 49, 24, 19],
[-58, -18, 48, -6, 24, -16, -49, -12, 46, 2],
[-67, 19, 21, -15, -39, -46, 45, 1, -13, 49, -48, -47],
[-42, 2, -3, 33, 45, -35, 48, 49],
[-29, 49, -1, -14, 48, -3, -33, -13, -46],
[-46, -21, -12, 49, -18, 20, 4, 47],
[-59, -18, 45, -14, 22, -12, 15, 2, -33, -49],
[-45, 3, -18, -13, 4, -14, -33, 47],
[-42, -45, 14, -15, -12, 19, -32, 47],
[-4, -32, -15, 34, 46, -47, 45, 3],
[-20, -46, 47, 19, -48, 13, -35, -15],
[-57, -12, 20, -18, -13, 45, 48, -46, -34, 32, -15, -47],
[14, -21, 47, -23],
[-38, -22, 32, 48, 46, -13, -2, 5, -49],
[-62, -21, 12, -47, 3, -46, 48, -23, 18],
[35, -21, -4, 47, -20, 49, 45, 3],
[4, 41, 47, -45],
[-47, -18, 33, -42, -15, -4, -2, 49, -22, 45, -1],
[-13, 3, 47, 45, -1, 19, 17, 48],
[-21, 46, -32, -35, -18, -19, -6, -2, 45, -48, -47, 49]]

from random import choice
from pysat.solvers import Solver

def solve(problem):
    if problem == []:
        return False
    s = Solver(name='g4')
    for clause in problem:
        s.add_clause(clause)
    is_SAT = s.solve()
    s.delete()
    return is_SAT

def run():
    anchor = str(input("Season considered <YYYY-YY>: "))
    while (int(anchor.split("-")[0]) % 100) != (int(anchor.split("-")[1]) - 1) % 100:
        anchor = str(input("Season considered <YYYY-YY>: "))
    datebinary = [(int(anchor.split("-")[0]) // (2**k)) % 2 for k in range(11)] + [(int(anchor.split("-")[1]) // (2**k)) % 2 for k in range(7)]
    player = str(input("Player considered [🐍, 👑, 🌬]: "))
    while player != "🐍" and player != "👑" and player != "🌬":
        player = str(input("Player considered [🐍, 👑, 🌬]: "))
    if player == "🐍":
        # Kobe
        player = 2
    if player == "👑":
        # LeBron
        player = 0
    if player == "🌬":
        # Jordan
        player = 1
    playerbinary = [(player // (2**k)) % 2 for k in range(13)]
    age = str(input("Age during the season <YY>: "))
    while len(age) != 2 and not age[0] in "123456789" and not age[1] in "0123456789":
        age = str(input("Age during the season <YY>: "))
    agebinary = [(int(age) // (2**k)) % 2 for k in range(13)]
    stat = str(input("Stat considered [Age, Tm, Lg, Pos, G, MP, PER, TS%, 3PAr, FTr, ORB%, DRB%, TRB%, AST%, STL%, BLK%, TOV%, USG%, OWS, DWS, WS, WS/48, OBPM, DBPM, BPM, VORP]: "))
    while not stat in ['Pos', 'G', 'MP', 'PER', 'TS%', '3PAr', 'FTr', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%', 'BLK%', 'TOV%', 'USG%', 'OWS', 'DWS', 'WS', 'WS/48', 'OBPM', 'DBPM', 'BPM', 'VORP']:
        stat = str(input("Stat considered [Age, Tm, Lg, Pos, G, MP, PER, TS%, 3PAr, FTr, ORB%, DRB%, TRB%, AST%, STL%, BLK%, TOV%, USG%, OWS, DWS, WS, WS/48, OBPM, DBPM, BPM, VORP]: "))
    VALUES = ['Age', 'Tm', 'Lg', 'Pos', 'G', 'MP', 'PER', 'TS%', '3PAr', 'FTr', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%', 'BLK%', 'TOV%', 'USG%', 'OWS', 'DWS', 'WS', 'WS/48', 'OBPM', 'DBPM', 'BPM', 'VORP']
    v = 0
    while v < len(VALUES) and VALUES[v] != stat:
        v += 1
    xtra = [(v // (2**k)) % 2 for k in range(len(VALUES) + 1)]
    dpoint = datebinary + agebinary + playerbinary + xtra
    instance = [[int(((-1)**(dpoint[k])) * int(k + 1))] for k in range(len(dpoint))]
    result = solve(instance + SAT)
    if result == False:
        print("Result: not the 🐐")
    else:
        print("Result: might be the 🐐")

run()
